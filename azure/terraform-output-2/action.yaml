name: "Load Terraform Outputs from Azure"
description: "Load Terraform Outputs from Azure Storage Account Backend"
inputs:
  AZ_TENANT_ID:
    required: true
    description: The Azure Tenant ID
  AZ_CLIENT_ID:
    required: true
    description: The Azure Client ID
  AZ_SUBSCRIPTION_ID:
    required: true
    description: The Azure Subscription ID
  STORAGE_ACCOUNT_RESOURCEGROUP:
    required: true
    description: The Resource Group of the Terraform State Storage Account
  STORAGE_ACCOUNT_NAME:
    required: true
    description: The Terraform State Storage Account
  STORAGE_ACCOUNT_CONTAINER:
    required: true
    description: The Terraform State Storage Container
  STORAGE_BLOB_NAME:
    required: false
    description: The Terraform State Blob Key stored under the Container
    default: terraform.tfstate
  AUTH_MODE:
    required: false
    description: The Storage Account Authentication mode, set to 'login' or 'key'
    default: key
  SKIP_AZURE_LOGIN:
    required: false
    description: Set to 'true' to skip Azure Login

outputs:
  TERRAFORM_OUTPUTS:
    description: The Terraform output JSON
    value: ${{ steps.tfOutput.outputs.RESULT }}

runs:
  using: composite
  steps:
    - name: Validate Inputs
      shell: bash
      run: |
        fail=""
        [[ -z "${{ inputs.AZ_CLIENT_ID }}" ]] && echo "::error::Missing AZ_CLIENT_ID in inputs" && fail=1
        [[ -z "${{ inputs.AZ_TENANT_ID }}" ]] && echo "::error::Missing AZ_TENANT_ID in inputs" && fail=1
        [[ -z "${{ inputs.AZ_SUBSCRIPTION_ID }}" ]] && echo "::error::Missing AZ_SUBSCRIPTION_ID in inputs" && fail=1
        [[ -z "${{ inputs.STORAGE_ACCOUNT_RESOURCEGROUP }}" ]] && echo "::error::Missing STORAGE_ACCOUNT_RESOURCEGROUP in inputs" && fail=1
        [[ -z "${{ inputs.STORAGE_ACCOUNT_NAME }}" ]] && echo "::error::Missing STORAGE_ACCOUNT_NAME in inputs" && fail=1
        [[ -z "${{ inputs.STORAGE_ACCOUNT_CONTAINER }}" ]] && echo "::error::Missing STORAGE_ACCOUNT_CONTAINER in inputs" && fail=1
        [[ -z "${{ inputs.STORAGE_BLOB_NAME }}" ]] && echo "::error::Missing STORAGE_BLOB_NAME in inputs" && fail=1

        [[ -n "$fail" ]] && exit 1 || exit 0

    - name: Azure Login
      if: inputs.SKIP_AZURE_LOGIN != 'true'
      uses: azure/login@v1
      with:
        client-id: ${{ inputs.AZ_CLIENT_ID }}
        tenant-id: ${{ inputs.AZ_TENANT_ID }}
        subscription-id: ${{ inputs.AZ_SUBSCRIPTION_ID }}

    - name: Get Terraform Output
      shell: bash
      run: |
        if [ "${{ inputs.AUTH_MODE }}" == "key" ]; then
          accountKey=$(az storage account keys list -g $RESOURCE_GROUP -n $ACCOUNT_NAME | jq -r '.[0].value')
          state=$(az storage blob download --account-name $ACCOUNT_NAME --account-key $azKey --container-name $CONTAINER --name $BLOB)
        else
          state=$(az storage blob download --account-name $ACCOUNT_NAME --container-name $CONTAINER --name $BLOB --auth-mode login)
        fi

        outputs=$(echo "$state" | jq '.outputs')
        for key in $(echo "$outputs" | jq -r 'keys[]'); do
          sensitive=$(echo "$outputs" | jq -r ".$key.sensitive")
          if [[ "$sensitive" == "true" ]]; then
            value=$(echo "$outputs" | jq -r ".$key.value")
            echo "::add-mask::$value"
          fi
        done

        EOF=$(dd if=/dev/urandom bs=15 count=1 status=none | base64)
        echo "RESULT<<$EOF" >> $GITHUB_OUTPUT
        echo "$outputs" >> $GITHUB_OUTPUT
        echo "$EOF" >> $GITHUB_OUTPUT
      env:
        RESOURCE_GROUP: ${{ inputs.STORAGE_ACCOUNT_RESOURCEGROUP }}
        ACCOUNT_NAME: ${{ inputs.STORAGE_ACCOUNT_NAME }}
        CONTAINER: ${{ inputs.STORAGE_ACCOUNT_CONTAINER }}
        BLOB: ${{ inputs.STORAGE_BLOB_NAME }}

    - name: Export Outputs
      if: inputs.EXPORT_OUTPUTS != 'null'
      shell: bash
      run: |
        IFS=',' read -ra variables <<< "${{ inputs.EXPORT_OUTPUTS }}"
        for var in "${variables[@]}"
        do
          value=$(echo "$TF_OUTPUTS" | jq -r ".[\"$var\"].value")
          echo "$var=$value" >> "$GITHUB_ENV"
        done
      env:
        TF_OUTPUTS: ${{ steps.tfOutput.outputs.RESULT }}
