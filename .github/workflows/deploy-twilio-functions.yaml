name: "Deploy Twilio Functions Service"

on:
  workflow_call:
    inputs:
      SERVICE_DIRECTORY:
        type: string
        required: true
        description: The path to the Twilio Functions Service base directory (where package.json is located)
      BUILD_WORKFLOW_NAME:
        type: string
        required: true
        description: The name of the workflow that built the artifact.
      TWILIO_ACCOUNT_SID:
        type: string
        required: true
        description: The Twilio Account SID
      TWILIO_API_KEY:
        type: string
        required: true
        description: The SID of a Twilio API Key
      SELECT_VERSION:
        type: string
        required: false
        description: (Optional) Select a specific artifact version to deploy
      NODE_VERSION:
        type: string
        required: false
        description: (Optional) Override Node Version (Default to engines.node or 18 if not found)
      VERSION_COMPARE_PATH:
        type: string
        required: false
        description: (Optional) The path to a version.txt file to be compared to. Prevents overwriting the current deployed version if set. 
    secrets:
      TWILIO_API_SECRET:
        required: true
        description: The secret value of TWILIO_API_KEY
    outputs:
      SERVICE_NAME:
        description: The name of the deployed Functions Service
        value: ${{ jobs.deploy_twilio_functions.outputs.SERVICE_NAME }}
      SERVICE_VERSION:
        description: The version of the deployed Functions Service
        value: ${{ jobs.deploy_twilio_functions.outputs.SERVICE_VERSION }}

jobs:
  deploy_twilio_functions:
    runs-on: ubuntu-22.04

    outputs:
      SERVICE_NAME: ${{ steps.version.outputs.NAME }}
      SERVICE_VERSION: ${{ steps.version.outputs.VERSION }}

    steps:
    - name: Checkout ${{ github.repository }}/${{ inputs.SERVICE_DIRECTORY }}/package.json+.twilioserverlessrc@${{ github.ref_name }}
      uses: actions/checkout@v4
      with:
        path: main
        sparse-checkout: |
          ${{ inputs.SERVICE_DIRECTORY }}/package.json
          ${{ inputs.SERVICE_DIRECTORY }}/.twilioserverlessrc
        sparse-checkout-cone-mode: false

    - name: Checkout zingdevlimited/actions-helpers@v3
      uses: actions/checkout@v4
      with:
        repository: zingdevlimited/actions-helpers
        path: helpers
        ref: v3

    - name: Resolve Dependencies
      run: |
        if [ -z "${{ inputs.NODE_VERSION }}" ]; then
          nodeVer=$(cat ${{ inputs.SERVICE_DIRECTORY }}/package.json | jq -r '.engines.node // empty')
          if [ -z "$nodeVer" ]; then
            nodeVer="18.x"
          fi
        fi
        echo "NODE_VERSION=$nodeVer" >> "$GITHUB_ENV"
        
    - name: Set up Node ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Get package.json version
      id: version
      working-directory: main/${{ inputs.SERVICE_DIRECTORY }}
      run: |
        name=$(cat package.json | jq -r .name)
        version=$(cat package.json | jq -r .version)
        echo "NAME=$name" >> "$GITHUB_OUTPUT"

        if [ -z "${{ inputs.SELECT_VERSION }}" ]; then
          echo "VERSION=$version" >> "$GITHUB_OUTPUT"
        else
          echo "VERSION=${{ inputs.SELECT_VERSION }}" >> "$GITHUB_OUTPUT" 
        fi
    
    - name: Get Existing Service
      id: existingService
      if: inputs.VERSION_COMPARE_PATH != ''
      continue-on-error: true
      uses: ./helpers/get-twilio-functions-service
      with:
        SERVICE_NAME: ${{ steps.version.outputs.NAME }}
        TWILIO_API_KEY: ${{ inputs.TWILIO_API_KEY }}
        TWILIO_API_SECRET: ${{ secrets.TWILIO_API_SECRET }}

    - name: Check Deployed Service
      id: versionCompare
      if: |
        inputs.VERSION_COMPARE_PATH != '' &&
        steps.existingService.outcome == 'success'
      run: |
        response=$(curl -sX GET "$BASE_URL/$PATH")

        if [ "$response" == "$VERSION" ]; then
          echo "::warning::Service with version $VERSION is already deployed. Skipping deployment"
          echo "SKIP=true" >> $GITHUB_OUTPUT
        fi
      env:
        BASE_URL: ${{ steps.existingService.outputs.BASE_URL }}
        PATH: ${{ inputs.VERSION_COMPARE_PATH }}
        VERSION: ${{ steps.version.outputs.VERSION }}

    - name: Download Artifact from ${{ inputs.BUILD_WORKFLOW_NAME }}
      if: steps.versionCompare.outputs.SKIP != 'true'
      uses: dawidd6/action-download-artifact@246dbf436b23d7c49e21a7ab8204ca9ecd1fe615 # v2.28.0
      with:
        name: "${{ steps.version.outputs.NAME }}@${{ steps.version.outputs.VERSION }}"
        path: main/${{ inputs.SERVICE_DIRECTORY }}
        workflow: ${{ inputs.BUILD_WORKFLOW_NAME }}
        workflow_conclusion: success

    - name: Unzip Build Artifact
      if: steps.versionCompare.outputs.SKIP != 'true'
      working-directory: main/${{ inputs.SERVICE_DIRECTORY }}
      run: |
        unzip -q dist.zip
        rm dist.zip

    - name: Deploy Functions (${{ inputs.TWILIO_ACCOUNT_SID }})
      if: steps.versionCompare.outputs.SKIP != 'true'
      working-directory: main/${{ inputs.SERVICE_DIRECTORY }}
      run: |
          mkdir -p src/functions
          deployOutput=$(npx twilio-run@3.5.3 deploy --production \
            --username $TWILIO_API_KEY --password $TWILIO_API_SECRET --output-format json | jq '')
          if [ "$?" != "0" ] || [ -z "$(echo "$deployOutput" | jq -r '.serviceSid // empty')" ]; then
            echo "::error::Functions deployment has failed. Please check the run logs." >&2
            exit 1
          fi
          echo "$deployOutput" >&2
          echo "## Deployed Twilio Functions ${{ steps.version.outputs.NAME }}@${{ steps.version.outputs.VERSION }}" >> "$GITHUB_STEP_SUMMARY"
          echo '```json' >> "$GITHUB_STEP_SUMMARY"
          echo "$deployOutput" >> "$GITHUB_STEP_SUMMARY"
          echo '```' >> "$GITHUB_STEP_SUMMARY"
      env:
        TWILIO_API_KEY: ${{ inputs.TWILIO_API_KEY }}
        TWILIO_API_SECRET: ${{ secrets.TWILIO_API_SECRET }}